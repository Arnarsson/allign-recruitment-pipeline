{
  "name": "My workflow 37",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "allign-developer-application",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "2304a8ab-f817-4906-903f-9a2a37b890aa",
      "name": "üì• Application Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1232,
        336
      ],
      "webhookId": "allign-dev-app-v2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "app-id",
              "name": "applicationId",
              "value": "={{ $json.email.split('@')[0] }}-{{ $now.format('yyyy-MM-dd-HHmmss') }}",
              "type": "string"
            },
            {
              "id": "processed-at",
              "name": "processedAt",
              "value": "={{ $now.toISO() }}",
              "type": "string"
            },
            {
              "id": "referral-source",
              "name": "referralSource",
              "value": "={{ $json.referralSource ?? 'direct' }}",
              "type": "string"
            },
            {
              "id": "application-data",
              "name": "fullApplication",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "06d670c9-eb55-410a-bf1f-5cab990dcf39",
      "name": "üîÑ Normalize Application Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1008,
        336
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process AI evaluation with proper data item linking\nconst items = $input.all();\nconst results = [];\n\nfor (const [index, item] of items.entries()) {\n  try {\n    // Get the original application data\n    const originalData = item.json.fullApplication || {};\n    const aiResponse = item.json.message?.content || item.json.content || '{}';\n    \n    // Parse AI evaluation\n    let aiEvaluation;\n    try {\n      // Clean the response and extract JSON\n      const jsonMatch = aiResponse.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        aiEvaluation = JSON.parse(jsonMatch[0]);\n      } else {\n        throw new Error('No JSON found in AI response');\n      }\n    } catch (parseError) {\n      // Fallback evaluation for parsing errors\n      aiEvaluation = {\n        overallScore: 50,\n        routing: \"REVIEW\",\n        scores: {\n          technical: 50,\n          aiTools: 50,\n          availability: 50,\n          culture: 50,\n          portfolio: 50,\n          communication: 50\n        },\n        analysis: {\n          strengths: [\"Application received\"],\n          concerns: [\"AI evaluation parsing failed\"],\n          recommendations: [\"Manual review required\"],\n          interviewFocus: [\"General discussion\"]\n        },\n        summary: \"Manual review required due to AI parsing error.\",\n        confidence: 0.5\n      };\n    }\n    \n    // Calculate weighted score\n    const weightedScore = Math.round(\n      (aiEvaluation.scores?.technical * 0.35 || 25) +\n      (aiEvaluation.scores?.aiTools * 0.20 || 10) +\n      (aiEvaluation.scores?.availability * 0.15 || 7.5) +\n      (aiEvaluation.scores?.culture * 0.15 || 7.5) +\n      (aiEvaluation.scores?.portfolio * 0.10 || 5) +\n      (aiEvaluation.scores?.communication * 0.05 || 2.5)\n    );\n    \n    // Determine final routing based on weighted score\n    let finalRouting = aiEvaluation.routing || \"REVIEW\";\n    if (weightedScore >= 85) finalRouting = \"FAST_TRACK\";\n    else if (weightedScore >= 70) finalRouting = \"INTERVIEW\";\n    else if (weightedScore >= 55) finalRouting = \"TECHNICAL_TEST\";\n    else if (weightedScore >= 40) finalRouting = \"REVIEW\";\n    else finalRouting = \"REJECT\";\n    \n    // Create urgency level based on routing\n    const urgencyMap = {\n      \"FAST_TRACK\": \"üö® URGENT\",\n      \"INTERVIEW\": \"‚ö° HIGH\",\n      \"TECHNICAL_TEST\": \"üìã MEDIUM\",\n      \"REVIEW\": \"üîç LOW\",\n      \"REJECT\": \"‚ùå NONE\"\n    };\n    \n    // Prepare enhanced result with proper linking\n    const processedResult = {\n      // Original application data (flattened for easier access)\n      name: originalData.name || 'Unknown',\n      email: originalData.email || 'unknown@example.com',\n      phone: originalData.phone || '',\n      location: originalData.location || '',\n      linkedin: originalData.linkedin || '',\n      github: originalData.github || '',\n      reactExperience: originalData.reactExperience || '',\n      aiToolsExperience: originalData.aiToolsExperience || '',\n      portfolio: originalData.portfolio || '',\n      startDate: originalData.startDate || '',\n      workHours: originalData.workHours || '',\n      remoteExperience: originalData.remoteExperience || '',\n      whyAllign: originalData.whyAllign || '',\n      startupExperience: originalData.startupExperience || '',\n      technicalChallenge: originalData.technicalChallenge || '',\n      salaryExpectations: originalData.salaryExpectations || '',\n      questionsForUs: originalData.questionsForUs || '',\n      additionalInfo: originalData.additionalInfo || '',\n      submittedAt: originalData.submittedAt || new Date().toISOString(),\n      referralSource: originalData.referralSource || 'direct',\n      userAgent: originalData.userAgent || '',\n      consent: originalData.consent || false,\n      \n      // Processing metadata\n      applicationId: item.json.applicationId || `${originalData.email?.split('@')[0] || 'unknown'}-${Date.now()}`,\n      processedAt: item.json.processedAt || new Date().toISOString(),\n      \n      // AI evaluation results\n      evaluation: {\n        ...aiEvaluation,\n        finalScore: weightedScore,\n        finalRouting: finalRouting,\n        urgencyLevel: urgencyMap[finalRouting],\n        evaluatedAt: new Date().toISOString(),\n        processingTime: Date.now() - new Date(item.json.processedAt || new Date()).getTime(),\n        rawAiResponse: aiResponse\n      },\n      \n      // Routing metadata for downstream nodes\n      routingData: {\n        route: finalRouting,\n        urgency: urgencyMap[finalRouting],\n        requiresImmediateAction: finalRouting === \"FAST_TRACK\",\n        timelineHours: {\n          \"FAST_TRACK\": 2,\n          \"INTERVIEW\": 48,\n          \"TECHNICAL_TEST\": 72,\n          \"REVIEW\": 168,\n          \"REJECT\": 24\n        }[finalRouting]\n      }\n    };\n    \n    results.push({\n      json: processedResult,\n      pairedItem: { item: index }\n    });\n    \n  } catch (error) {\n    // Error handling with proper linking\n    const originalData = item.json.fullApplication || {};\n    results.push({\n      json: {\n        // Basic data even in error case\n        name: originalData.name || 'Error Processing',\n        email: originalData.email || 'error@example.com',\n        phone: originalData.phone || '',\n        location: originalData.location || '',\n        linkedin: originalData.linkedin || '',\n        github: originalData.github || '',\n        reactExperience: originalData.reactExperience || '',\n        aiToolsExperience: originalData.aiToolsExperience || '',\n        portfolio: originalData.portfolio || '',\n        startDate: originalData.startDate || '',\n        workHours: originalData.workHours || '',\n        remoteExperience: originalData.remoteExperience || '',\n        whyAllign: originalData.whyAllign || '',\n        startupExperience: originalData.startupExperience || '',\n        technicalChallenge: originalData.technicalChallenge || '',\n        salaryExpectations: originalData.salaryExpectations || '',\n        questionsForUs: originalData.questionsForUs || '',\n        additionalInfo: originalData.additionalInfo || '',\n        submittedAt: originalData.submittedAt || new Date().toISOString(),\n        referralSource: originalData.referralSource || 'direct',\n        userAgent: originalData.userAgent || '',\n        consent: originalData.consent || false,\n        applicationId: item.json.applicationId || `error-${Date.now()}`,\n        processedAt: item.json.processedAt || new Date().toISOString(),\n        evaluation: {\n          error: error.message,\n          finalRouting: \"REVIEW\",\n          finalScore: 0,\n          urgencyLevel: \"üîç ERROR - MANUAL REVIEW\",\n          evaluatedAt: new Date().toISOString()\n        }\n      },\n      pairedItem: { item: index }\n    });\n  }\n}\n\nreturn results;"
      },
      "id": "94ea5e4d-3d8d-4195-8f17-640255408a55",
      "name": "‚öôÔ∏è Process AI Evaluation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        400
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.evaluation.finalRouting }}",
                    "rightValue": "FAST_TRACK",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "4493364b-6cdf-4827-840f-97672d3ca269",
      "name": "üöÄ Route: Fast Track",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -112,
        0
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.evaluation.finalRouting }}",
                    "rightValue": "INTERVIEW",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "eba763ad-171a-4a8d-abb5-400b38f75dc7",
      "name": "üíº Route: Interview",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -112,
        192
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.evaluation.finalRouting }}",
                    "rightValue": "TECHNICAL_TEST",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "25f37366-ee5a-48ea-b16b-db6d754067b5",
      "name": "üß™ Route: Technical Test",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -112,
        384
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.evaluation.finalRouting }}",
                    "rightValue": "REJECT",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "f32e370d-c540-4b15-934f-2e7a24a087fe",
      "name": "‚ùå Route: Reject",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -112,
        576
      ]
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C098E9C8MPZ",
          "mode": "list",
          "cachedResultName": "recruit"
        },
        "text": "{{ $json.evaluation.urgencyLevel }} **EXCEPTIONAL CANDIDATE ALERT** {{ $json.evaluation.urgencyLevel }}\\n\\n**{{ $json.name }}** ‚Ä¢ Score: {{ $json.evaluation.finalScore }}/100 ‚Ä¢ Confidence: {{ Math.round(($json.evaluation.confidence || 0) * 100) }}%\\n\\nüìß {{ $json.email }}\\nüìç {{ $json.location }}\\nüîó {{ $json.linkedin || 'Not provided' }}\\n‚ö° Available: {{ $json.startDate }}\\n\\n**üéØ Key Strengths:**\\n{{ ($json.evaluation.analysis?.strengths || []).map(s => '‚Ä¢ ' + s).join('\\\\n') }}\\n\\n**üé§ Interview Focus Areas:**\\n{{ ($json.evaluation.analysis?.interviewFocus || []).map(f => '‚Ä¢ ' + f).join('\\\\n') }}\\n\\n**üí° AI Summary:**\\n{{ $json.evaluation.summary }}\\n\\n**‚è∞ ACTION REQUIRED:** Schedule interview within 2 hours\\nüÜî Application ID: `{{ $json.applicationId }}`\\n\\n*Automated by ALLIGN Recruitment AI*",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "id": "c6f28a6e-98aa-4070-8c19-20ad3f9378c6",
      "name": "üö® Slack: Fast Track Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [
        112,
        0
      ],
      "webhookId": "be6535de-7983-4159-a15b-2d8703740bb1",
      "credentials": {
        "slackOAuth2Api": {
          "id": "yhoC4Xrx7eqrOOzJ",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C098E9C8MPZ",
          "mode": "list",
          "cachedResultName": "recruit"
        },
        "text": "‚úÖ **STRONG CANDIDATE - INTERVIEW RECOMMENDED**\\n\\n**{{ $json.name }}** ‚Ä¢ Score: {{ $json.evaluation.finalScore }}/100\\n\\nüìß {{ $json.email }}\\nüìç {{ $json.location }}\\n‚ö° Available: {{ $json.startDate }}\\n\\n**üí™ Strengths:**\\n{{ ($json.evaluation.analysis?.strengths || []).map(s => '‚Ä¢ ' + s).join('\\\\n') }}\\n\\n{{ ($json.evaluation.analysis?.concerns || []).length > 0 ? '**‚ö†Ô∏è Areas to Explore:**\\\\n' + $json.evaluation.analysis.concerns.map(c => '‚Ä¢ ' + c).join('\\\\n') : '' }}\\n\\n**üéØ Interview Focus:**\\n{{ ($json.evaluation.analysis?.interviewFocus || []).map(f => '‚Ä¢ ' + f).join('\\\\n') }}\\n\\n**‚è∞ Next Steps:** Schedule interview within 48 hours\\nüÜî Application ID: `{{ $json.applicationId }}`",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "id": "0ee7da57-09a0-4580-82ee-7494c46954ed",
      "name": "üìã Slack: Interview Candidate",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [
        112,
        192
      ],
      "webhookId": "95a9d1c2-3cad-4c3e-9f29-30de68214a10",
      "credentials": {
        "slackOAuth2Api": {
          "id": "yhoC4Xrx7eqrOOzJ",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C098E9C8MPZ",
          "mode": "list",
          "cachedResultName": "recruit"
        },
        "text": "üß™ **TECHNICAL ASSESSMENT REQUIRED**\\n\\n**{{ $json.name }}** ‚Ä¢ Score: {{ $json.evaluation.finalScore }}/100\\n\\nüìß {{ $json.email }}\\nüìç {{ $json.location }}\\n\\n**üìã Summary:** {{ $json.evaluation.summary }}\\n\\n**üéØ Assessment Focus Areas:**\\n{{ ($json.evaluation.analysis?.concerns || []).map(c => '‚Ä¢ ' + c).join('\\\\n') }}\\n\\n**‚è∞ Next Steps:** Send coding assessment within 72 hours\\nüÜî Application ID: `{{ $json.applicationId }}`",
        "otherOptions": {}
      },
      "id": "12d6ad03-1766-4819-8234-00374b01e9b7",
      "name": "üß™ Slack: Technical Test Required",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [
        112,
        384
      ],
      "webhookId": "4c15a0c6-2f97-476b-97ac-1e56b27c59b2",
      "credentials": {
        "slackOAuth2Api": {
          "id": "yhoC4Xrx7eqrOOzJ",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "applications",
          "mode": "list",
          "cachedResultName": "applications"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "name": "={{ $json.name }}",
            "email": "={{ $json.email }}",
            "phone": "={{ $json.phone }}",
            "location": "={{ $json.location }}",
            "linkedin_url": "={{ $json.linkedin }}",
            "github_url": "={{ $json.github }}",
            "react_experience": "={{ $json.reactExperience }}",
            "ai_tools_experience": "={{ $json.aiToolsExperience }}",
            "portfolio_links": "={{ $json.portfolio }}",
            "start_date": "={{ $json.startDate }}",
            "work_hours_timezone": "={{ $json.workHours }}",
            "remote_experience": "={{ $json.remoteExperience }}",
            "why_allign": "={{ $json.whyAllign }}",
            "startup_experience": "={{ $json.startupExperience }}",
            "technical_challenge": "={{ $json.technicalChallenge }}",
            "salary_expectations": "={{ $json.salaryExpectations }}",
            "questions_for_us": "={{ $json.questionsForUs }}",
            "additional_info": "={{ $json.additionalInfo }}",
            "submitted_at": "={{ $json.submittedAt }}",
            "referral_source": "={{ $json.referralSource }}",
            "user_agent": "={{ $json.userAgent }}",
            "consent_given": "={{ $json.consent }}",
            "ai_evaluation_json": "={{ JSON.stringify($json.evaluation) }}",
            "ai_overall_score": "={{ $json.evaluation.finalScore }}",
            "ai_recommendation": "={{ $json.evaluation.finalRouting }}",
            "ai_evaluation_summary": "={{ $json.evaluation.urgencyLevel }}",
            "status": "submitted",
            "processed_at": "={{ $json.processedAt }}"
          },
          "matchingColumns": [
            "email"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "name",
              "displayName": "name",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "email",
              "displayName": "email",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "phone",
              "displayName": "phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "location",
              "displayName": "location",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "linkedin_url",
              "displayName": "linkedin_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "github_url",
              "displayName": "github_url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "react_experience",
              "displayName": "react_experience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ai_tools_experience",
              "displayName": "ai_tools_experience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "portfolio_links",
              "displayName": "portfolio_links",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "start_date",
              "displayName": "start_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "work_hours_timezone",
              "displayName": "work_hours_timezone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "remote_experience",
              "displayName": "remote_experience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "why_allign",
              "displayName": "why_allign",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "startup_experience",
              "displayName": "startup_experience",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "technical_challenge",
              "displayName": "technical_challenge",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "salary_expectations",
              "displayName": "salary_expectations",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "questions_for_us",
              "displayName": "questions_for_us",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "additional_info",
              "displayName": "additional_info",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "submitted_at",
              "displayName": "submitted_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "referral_source",
              "displayName": "referral_source",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "user_agent",
              "displayName": "user_agent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "consent_given",
              "displayName": "consent_given",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ai_evaluation_json",
              "displayName": "ai_evaluation_json",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ai_overall_score",
              "displayName": "ai_overall_score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ai_recommendation",
              "displayName": "ai_recommendation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "ai_evaluation_summary",
              "displayName": "ai_evaluation_summary",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "processed_at",
              "displayName": "processed_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "notes",
              "displayName": "notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "42d9e29d-76a1-41c7-83ed-748be88b4ace",
      "name": "üíæ Store Application Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -112,
        960
      ],
      "credentials": {
        "postgres": {
          "id": "G42et2ypopM9SuOg",
          "name": "Postgres accountMain"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\\n  \\\"status\\\": \\\"success\\\",\\n  \\\"message\\\": \\\"Application received and processed successfully\\\",\\n  \\\"data\\\": {\\n    \\\"applicationId\\\": \\\"{{ $json.applicationId }}\\\",\\n    \\\"processedAt\\\": \\\"{{ $json.processedAt }}\\\",\\n    \\\"estimatedResponseTime\\\": \\\"24-48 hours\\\",\\n    \\\"nextSteps\\\": \\\"Our team will review your application and contact you with next steps\\\"\\n  },\\n  \\\"meta\\\": {\\n    \\\"processingTimeMs\\\": {{ $json.evaluation?.processingTime || 0 }},\\n    \\\"systemVersion\\\": \\\"v2.0\\\",\\n    \\\"aiPowered\\\": true\\n  }\\n}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "cf49347b-e0ef-4742-b764-db9a2a17d7f0",
      "name": "‚úÖ Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        112,
        768
      ],
      "disabled": true
    },
    {
      "parameters": {
        "subject": "Thank you for your application to ALLIGN",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -368,
        768
      ],
      "id": "2410a7ab-ae4e-4094-840e-20e1c0a39d9d",
      "name": "Send a message",
      "webhookId": "fc55abc8-87de-4f52-99db-7c20680e1959",
      "credentials": {
        "gmailOAuth2": {
          "id": "5H9MsTwZxPEq7I09",
          "name": "Krebs88"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -800,
        608
      ],
      "id": "1572e777-1bb4-4134-82da-f54002e25fcc",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "XlWCt3vs3vStghNh",
          "name": "OpenAi account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS applications (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    phone VARCHAR(50),\n    location VARCHAR(255),\n    linkedin_url TEXT,\n    github_url TEXT,\n    react_experience TEXT,\n    ai_tools_experience TEXT,\n    portfolio_links TEXT,\n    start_date VARCHAR(100),\n    work_hours_timezone TEXT,\n    remote_experience TEXT,\n    why_allign TEXT,\n    startup_experience TEXT,\n    technical_challenge TEXT,\n    salary_expectations VARCHAR(255),\n    questions_for_us TEXT,\n    additional_info TEXT,\n    submitted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    referral_source VARCHAR(100) DEFAULT 'direct',\n    user_agent TEXT,\n    consent_given BOOLEAN DEFAULT FALSE,\n    ai_evaluation_json JSONB,\n    ai_overall_score INTEGER,\n    ai_recommendation VARCHAR(50),\n    ai_evaluation_summary TEXT,\n    status VARCHAR(50) DEFAULT 'submitted',\n    processed_at TIMESTAMP WITH TIME ZONE,\n    notes TEXT\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        576,
        752
      ],
      "id": "e080b941-c0ac-4802-9534-3ceddb808582",
      "name": "Execute a SQL query - Store Application Data",
      "credentials": {
        "postgres": {
          "id": "G42et2ypopM9SuOg",
          "name": "Postgres accountMain"
        }
      },
      "disabled": true
    }
  ],
  "pinData": {},
  "connections": {
    "üì• Application Webhook": {
      "main": [
        [
          {
            "node": "üîÑ Normalize Application Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Normalize Application Data": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Process AI Evaluation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Process AI Evaluation": {
      "main": [
        [
          {
            "node": "üöÄ Route: Fast Track",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíº Route: Interview",
            "type": "main",
            "index": 0
          },
          {
            "node": "üß™ Route: Technical Test",
            "type": "main",
            "index": 0
          },
          {
            "node": "‚ùå Route: Reject",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Store Application Data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üöÄ Route: Fast Track": {
      "main": [
        [
          {
          "node": "üö® Slack: Fast Track Alert",
          "type": "main",
          "index": 0
          }
        ]
      ]
    },
    "üíº Route: Interview": {
      "main": [
        [
          {
            "node": "üìã Slack: Interview Candidate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß™ Route: Technical Test": {
      "main": [
        [
          {
            "node": "üß™ Slack: Technical Test Required",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send a message": {
      "main": [
        [
          {
            "node": "‚úÖ Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        []
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "bdd4dfa9-1e22-423b-a73f-4dadabf6b641",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ec1ccdf24f8f3b324ea05f5b57837e16b7538c9694c010734b082b8e30179f14"
  },
  "id": "Fj4lG6ExK6IAZEq8",
  "tags": []
}