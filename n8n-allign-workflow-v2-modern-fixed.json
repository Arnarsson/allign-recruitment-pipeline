{
  "meta": {
    "instanceId": "allign-recruitment-pipeline-v2"
  },
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "allign-developer-application",
        "responseMode": "responseNode",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "webhook-trigger",
      "name": "üì• Application Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [200, 400],
      "webhookId": "allign-dev-app-v2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "app-id",
              "name": "applicationId",
              "value": "={{ $json.email.split('@')[0] }}-{{ $now.format('yyyy-MM-dd-HHmmss') }}",
              "type": "string"
            },
            {
              "id": "processed-at",
              "name": "processedAt",
              "value": "={{ $now.toISO() }}",
              "type": "string"
            },
            {
              "id": "referral-source",
              "name": "referralSource",
              "value": "={{ $json.referralSource ?? 'direct' }}",
              "type": "string"
            },
            {
              "id": "application-data",
              "name": "fullApplication",
              "value": "={{ $json }}",
              "type": "object"
            }
          ]
        }
      },
      "id": "normalize-data",
      "name": "üîÑ Normalize Application Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [400, 400]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "messages": {
          "values": [
            {
              "role": "system",
              "content": "You are an expert technical recruiter for ALLIGN, a construction tech startup. Your job is to evaluate developer applications with precision and consistency.\n\nALLIGN Context:\n- Building construction management software\n- Focus on field-ready, rugged applications\n- AI-first development approach\n- Early-stage startup (equity-focused compensation)\n- Remote-first team with European timezone preference\n\nEvaluation Framework:\nYou must provide a structured JSON response with detailed scoring across 6 criteria. Each score should be 0-100 with clear justification.\n\nScoring Weights:\n- Technical Skills (35%): React/Next.js expertise, problem-solving, architectural thinking\n- AI Tools Proficiency (20%): Claude, ChatGPT, Copilot experience and integration\n- Availability & Logistics (15%): Start date, timezone overlap, remote work setup\n- Culture & Mission Fit (15%): Construction tech interest, startup mentality\n- Portfolio Quality (10%): GitHub activity, production apps, code samples\n- Communication (5%): Clarity, professionalism, English proficiency\n\nRouting Logic (based on weighted average):\n- 85-100: FAST_TRACK (immediate interview)\n- 70-84: INTERVIEW (schedule within 48h)\n- 55-69: TECHNICAL_TEST (coding assessment)\n- 40-54: REVIEW (manual evaluation needed)\n- 0-39: REJECT (polite decline)\n\nRespond ONLY with valid JSON in this exact format:\n{\n  \"overallScore\": 85,\n  \"routing\": \"FAST_TRACK\",\n  \"scores\": {\n    \"technical\": 90,\n    \"aiTools\": 85,\n    \"availability\": 80,\n    \"culture\": 85,\n    \"portfolio\": 75,\n    \"communication\": 90\n  },\n  \"analysis\": {\n    \"strengths\": [\"Strong React expertise\", \"AI-first mindset\"],\n    \"concerns\": [\"Limited construction experience\"],\n    \"recommendations\": [\"Schedule technical interview\"],\n    \"interviewFocus\": [\"React architecture\", \"AI integration\"]\n  },\n  \"summary\": \"Excellent developer with strong technical skills and AI experience.\",\n  \"confidence\": 0.92\n}"
            },
            {
              "role": "user",
              "content": "Evaluate this developer application for ALLIGN:\n\n**CANDIDATE PROFILE:**\nName: {{ $json.fullApplication.name }}\nEmail: {{ $json.fullApplication.email }}\nLocation: {{ $json.fullApplication.location }}\nLinkedIn: {{ $json.fullApplication.linkedin }}\nGitHub: {{ $json.fullApplication.github }}\nReferral: {{ $json.referralSource }}\n\n**TECHNICAL EXPERIENCE:**\nReact/Next.js: {{ $json.fullApplication.reactExperience }}\n\nAI Tools Usage: {{ $json.fullApplication.aiToolsExperience }}\n\nPortfolio & Projects: {{ $json.fullApplication.portfolio }}\n\n**AVAILABILITY & LOGISTICS:**\nStart Date: {{ $json.fullApplication.startDate }}\nWork Schedule: {{ $json.fullApplication.workHours }}\nRemote Experience: {{ $json.fullApplication.remoteExperience }}\n\n**MOTIVATION & FIT:**\nWhy ALLIGN: {{ $json.fullApplication.whyAllign }}\nStartup Experience: {{ $json.fullApplication.startupExperience }}\nTechnical Challenge: {{ $json.fullApplication.technicalChallenge }}\n\n**ADDITIONAL DETAILS:**\nSalary Expectations: {{ $json.fullApplication.salaryExpectations }}\nQuestions for Us: {{ $json.fullApplication.questionsForUs }}\nAdditional Info: {{ $json.fullApplication.additionalInfo }}\n\nProvide your evaluation as valid JSON only."
            }
          ]
        },
        "options": {
          "temperature": 0.3,
          "maxTokens": 1000
        }
      },
      "id": "ai-evaluation",
      "name": "ü§ñ AI Recruitment Evaluation",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [600, 400]
    },
    {
      "parameters": {
        "jsCode": "// Process AI evaluation with proper data item linking\nconst items = $input.all();\nconst results = [];\n\nfor (const [index, item] of items.entries()) {\n  try {\n    // Get the original application data\n    const originalData = item.json.fullApplication || {};\n    const aiResponse = item.json.message?.content || item.json.content || '{}';\n    \n    // Parse AI evaluation\n    let aiEvaluation;\n    try {\n      // Clean the response and extract JSON\n      const jsonMatch = aiResponse.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        aiEvaluation = JSON.parse(jsonMatch[0]);\n      } else {\n        throw new Error('No JSON found in AI response');\n      }\n    } catch (parseError) {\n      // Fallback evaluation for parsing errors\n      aiEvaluation = {\n        overallScore: 50,\n        routing: \"REVIEW\",\n        scores: {\n          technical: 50,\n          aiTools: 50,\n          availability: 50,\n          culture: 50,\n          portfolio: 50,\n          communication: 50\n        },\n        analysis: {\n          strengths: [\"Application received\"],\n          concerns: [\"AI evaluation parsing failed\"],\n          recommendations: [\"Manual review required\"],\n          interviewFocus: [\"General discussion\"]\n        },\n        summary: \"Manual review required due to AI parsing error.\",\n        confidence: 0.5\n      };\n    }\n    \n    // Calculate weighted score\n    const weightedScore = Math.round(\n      (aiEvaluation.scores.technical * 0.35) +\n      (aiEvaluation.scores.aiTools * 0.20) +\n      (aiEvaluation.scores.availability * 0.15) +\n      (aiEvaluation.scores.culture * 0.15) +\n      (aiEvaluation.scores.portfolio * 0.10) +\n      (aiEvaluation.scores.communication * 0.05)\n    );\n    \n    // Determine final routing based on weighted score\n    let finalRouting = aiEvaluation.routing;\n    if (weightedScore >= 85) finalRouting = \"FAST_TRACK\";\n    else if (weightedScore >= 70) finalRouting = \"INTERVIEW\";\n    else if (weightedScore >= 55) finalRouting = \"TECHNICAL_TEST\";\n    else if (weightedScore >= 40) finalRouting = \"REVIEW\";\n    else finalRouting = \"REJECT\";\n    \n    // Create urgency level based on routing\n    const urgencyMap = {\n      \"FAST_TRACK\": \"üö® URGENT\",\n      \"INTERVIEW\": \"‚ö° HIGH\",\n      \"TECHNICAL_TEST\": \"üìã MEDIUM\",\n      \"REVIEW\": \"üîç LOW\",\n      \"REJECT\": \"‚ùå NONE\"\n    };\n    \n    // Prepare enhanced result with proper linking\n    const processedResult = {\n      // Original application data\n      ...originalData,\n      \n      // Processing metadata\n      applicationId: item.json.applicationId || `${originalData.email?.split('@')[0] || 'unknown'}-${Date.now()}`,\n      processedAt: item.json.processedAt || new Date().toISOString(),\n      referralSource: item.json.referralSource || 'direct',\n      \n      // AI evaluation results\n      evaluation: {\n        ...aiEvaluation,\n        finalScore: weightedScore,\n        finalRouting: finalRouting,\n        urgencyLevel: urgencyMap[finalRouting],\n        evaluatedAt: new Date().toISOString(),\n        processingTime: Date.now() - new Date(item.json.processedAt || new Date()).getTime(),\n        rawAiResponse: aiResponse\n      },\n      \n      // Routing metadata for downstream nodes\n      routingData: {\n        route: finalRouting,\n        urgency: urgencyMap[finalRouting],\n        requiresImmediateAction: finalRouting === \"FAST_TRACK\",\n        timelineHours: {\n          \"FAST_TRACK\": 2,\n          \"INTERVIEW\": 48,\n          \"TECHNICAL_TEST\": 72,\n          \"REVIEW\": 168,\n          \"REJECT\": 24\n        }[finalRouting]\n      }\n    };\n    \n    results.push({\n      json: processedResult,\n      pairedItem: { item: index }\n    });\n    \n  } catch (error) {\n    // Error handling with proper linking\n    results.push({\n      json: {\n        ...item.json,\n        evaluation: {\n          error: error.message,\n          finalRouting: \"REVIEW\",\n          finalScore: 0,\n          urgencyLevel: \"üîç ERROR - MANUAL REVIEW\",\n          evaluatedAt: new Date().toISOString()\n        }\n      },\n      pairedItem: { item: index }\n    });\n  }\n}\n\nreturn results;"
      },
      "id": "process-evaluation",
      "name": "‚öôÔ∏è Process AI Evaluation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [800, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "fast-track-condition",
              "leftValue": "={{ $json.evaluation.finalRouting }}",
              "rightValue": "FAST_TRACK",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "switch-fast-track",
      "name": "üöÄ Route: Fast Track",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1000, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "interview-condition",
              "leftValue": "={{ $json.evaluation.finalRouting }}",
              "rightValue": "INTERVIEW",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "switch-interview",
      "name": "üíº Route: Interview",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1000, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "test-condition",
              "leftValue": "={{ $json.evaluation.finalRouting }}",
              "rightValue": "TECHNICAL_TEST",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "switch-technical-test",
      "name": "üß™ Route: Technical Test",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1000, 400]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "reject-condition",
              "leftValue": "={{ $json.evaluation.finalRouting }}",
              "rightValue": "REJECT",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "switch-reject",
      "name": "‚ùå Route: Reject",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1000, 500]
    },
    {
      "parameters": {
        "channel": "recruitment",
        "text": "{{ $json.evaluation.urgencyLevel }} **EXCEPTIONAL CANDIDATE ALERT** {{ $json.evaluation.urgencyLevel }}\\n\\n**{{ $json.name }}** ‚Ä¢ Score: {{ $json.evaluation.finalScore }}/100 ‚Ä¢ Confidence: {{ Math.round(($json.evaluation.confidence || 0) * 100) }}%\\n\\nüìß {{ $json.email }}\\nüìç {{ $json.location }}\\nüîó {{ $json.linkedin || 'Not provided' }}\\n‚ö° Available: {{ $json.startDate }}\\n\\n**üéØ Key Strengths:**\\n{{ ($json.evaluation.analysis?.strengths || []).map(s => '‚Ä¢ ' + s).join('\\\\n') }}\\n\\n**üé§ Interview Focus Areas:**\\n{{ ($json.evaluation.analysis?.interviewFocus || []).map(f => '‚Ä¢ ' + f).join('\\\\n') }}\\n\\n**üí° AI Summary:**\\n{{ $json.evaluation.summary }}\\n\\n**‚è∞ ACTION REQUIRED:** Schedule interview within 2 hours\\nüÜî Application ID: `{{ $json.applicationId }}`\\n\\n*Automated by ALLIGN Recruitment AI*",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "id": "slack-fast-track-alert",
      "name": "üö® Slack: Fast Track Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [1200, 120]
    },
    {
      "parameters": {
        "channel": "recruitment",
        "text": "‚úÖ **STRONG CANDIDATE - INTERVIEW RECOMMENDED**\\n\\n**{{ $json.name }}** ‚Ä¢ Score: {{ $json.evaluation.finalScore }}/100\\n\\nüìß {{ $json.email }}\\nüìç {{ $json.location }}\\n‚ö° Available: {{ $json.startDate }}\\n\\n**üí™ Strengths:**\\n{{ ($json.evaluation.analysis?.strengths || []).map(s => '‚Ä¢ ' + s).join('\\\\n') }}\\n\\n{{ ($json.evaluation.analysis?.concerns || []).length > 0 ? '**‚ö†Ô∏è Areas to Explore:**\\\\n' + $json.evaluation.analysis.concerns.map(c => '‚Ä¢ ' + c).join('\\\\n') : '' }}\\n\\n**üéØ Interview Focus:**\\n{{ ($json.evaluation.analysis?.interviewFocus || []).map(f => '‚Ä¢ ' + f).join('\\\\n') }}\\n\\n**‚è∞ Next Steps:** Schedule interview within 48 hours\\nüÜî Application ID: `{{ $json.applicationId }}`",
        "otherOptions": {
          "mrkdwn": true
        }
      },
      "id": "slack-interview-alert",
      "name": "üìã Slack: Interview Candidate",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [1200, 220]
    },
    {
      "parameters": {
        "channel": "recruitment",
        "text": "üß™ **TECHNICAL ASSESSMENT REQUIRED**\\n\\n**{{ $json.name }}** ‚Ä¢ Score: {{ $json.evaluation.finalScore }}/100\\n\\nüìß {{ $json.email }}\\nüìç {{ $json.location }}\\n\\n**üìã Summary:** {{ $json.evaluation.summary }}\\n\\n**üéØ Assessment Focus Areas:**\\n{{ ($json.evaluation.analysis?.concerns || []).map(c => '‚Ä¢ ' + c).join('\\\\n') }}\\n\\n**‚è∞ Next Steps:** Send coding assessment within 72 hours\\nüÜî Application ID: `{{ $json.applicationId }}`"
      },
      "id": "slack-technical-test-alert",
      "name": "üß™ Slack: Technical Test Required",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.2,
      "position": [1200, 320]
    },
    {
      "parameters": {
        "sendTo": "={{ $json.email }}",
        "subject": "Thank you for applying to ALLIGN - Application Received",
        "emailFormat": "html",
        "message": "<!DOCTYPE html>\\n<html>\\n<head>\\n    <meta charset=\\\"utf-8\\\">\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\">\\n    <title>Thank you for applying to ALLIGN</title>\\n    <style>\\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; }\\n        .container { max-width: 600px; margin: 0 auto; background: #ffffff; }\\n        .header { background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 40px 20px; text-align: center; }\\n        .header h1 { margin: 0; font-size: 28px; font-weight: 600; }\\n        .content { padding: 40px 30px; }\\n        .highlight-box { background: #f8f9fa; border-left: 4px solid #667eea; padding: 20px; margin: 20px 0; border-radius: 4px; }\\n        .application-details { background: #f1f3f4; padding: 20px; border-radius: 8px; margin: 20px 0; }\\n        .footer { background: #f8f9fa; padding: 30px; text-align: center; color: #666; }\\n        .btn { display: inline-block; background: linear-gradient(135deg, #667eea, #764ba2); color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 10px 0; }\\n    </style>\\n</head>\\n<body>\\n    <div class=\\\"container\\\">\\n        <div class=\\\"header\\\">\\n            <h1>Thank you for applying to ALLIGN!</h1>\\n        </div>\\n        \\n        <div class=\\\"content\\\">\\n            <p>Hi {{ $json.name }},</p>\\n            \\n            <p>Thank you for your interest in joining ALLIGN as a <strong>Full-Stack Developer</strong>. We've successfully received your application and our AI-powered recruitment system has begun the initial evaluation process.</p>\\n            \\n            <div class=\\\"application-details\\\">\\n                <h3>üìã Application Details</h3>\\n                <ul>\\n                    <li><strong>Application ID:</strong> {{ $json.applicationId }}</li>\\n                    <li><strong>Submitted:</strong> {{ $json.submittedAt || 'Today' }}</li>\\n                    <li><strong>Position:</strong> Full-Stack Developer</li>\\n                    <li><strong>Referral Source:</strong> {{ $json.referralSource }}</li>\\n                </ul>\\n            </div>\\n            \\n            <div class=\\\"highlight-box\\\">\\n                <h3>üöÄ What happens next?</h3>\\n                <p>Our advanced AI recruitment system is currently analyzing your application based on technical skills, cultural fit, and alignment with our construction tech mission. You can expect to hear back from us within <strong>24-48 hours</strong> with next steps.</p>\\n            </div>\\n            \\n            <h3>üèóÔ∏è About ALLIGN</h3>\\n            <p>We're building the future of construction management software, starting with time tracking that actually works in the field. Our team is passionate about solving real-world problems for construction workers using modern, AI-powered tools.</p>\\n            \\n            <p>If you have any questions about your application or the process, feel free to reply to this email.</p>\\n            \\n            <p>Thank you again for your interest in ALLIGN!</p>\\n            \\n            <p><strong>The ALLIGN Recruitment Team</strong><br>\\n            Building the future of construction tech</p>\\n        </div>\\n        \\n        <div class=\\\"footer\\\">\\n            <p>ALLIGN ‚Ä¢ Construction Management Software<br>\\n            This is an automated message from our AI-powered recruitment system.<br>\\n            Application processed at {{ $now.format('yyyy-MM-dd HH:mm:ss') }} UTC</p>\\n        </div>\\n    </div>\\n</body>\\n</html>",
        "options": {},
        "fromName": "ALLIGN Recruitment Team"
      },
      "id": "send-confirmation-email",
      "name": "üìß Send Application Confirmation",
      "type": "n8n-nodes-base.emailSend",
      "typeVersion": 2.1,
      "position": [1000, 600]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "applications",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "application_id": "={{ $json.applicationId }}",
            "name": "={{ $json.name }}",
            "email": "={{ $json.email }}",
            "phone": "={{ $json.phone }}",
            "location": "={{ $json.location }}",
            "linkedin": "={{ $json.linkedin }}",
            "github": "={{ $json.github }}",
            "react_experience": "={{ $json.reactExperience }}",
            "ai_tools_experience": "={{ $json.aiToolsExperience }}",
            "portfolio": "={{ $json.portfolio }}",
            "start_date": "={{ $json.startDate }}",
            "work_hours": "={{ $json.workHours }}",
            "remote_experience": "={{ $json.remoteExperience }}",
            "why_allign": "={{ $json.whyAllign }}",
            "startup_experience": "={{ $json.startupExperience }}",
            "technical_challenge": "={{ $json.technicalChallenge }}",
            "salary_expectations": "={{ $json.salaryExpectations }}",
            "questions_for_us": "={{ $json.questionsForUs }}",
            "additional_info": "={{ $json.additionalInfo }}",
            "referral_source": "={{ $json.referralSource }}",
            "submitted_at": "={{ $json.submittedAt }}",
            "overall_score": "={{ $json.evaluation.finalScore }}",
            "routing": "={{ $json.evaluation.finalRouting }}",
            "ai_confidence": "={{ $json.evaluation.confidence }}",
            "evaluation_data": "={{ JSON.stringify($json.evaluation) }}",
            "processing_time_ms": "={{ $json.evaluation.processingTime }}",
            "created_at": "={{ $now.toISO() }}"
          }
        },
        "options": {}
      },
      "id": "store-in-database",
      "name": "üíæ Store Application Data",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [1000, 700]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\\n  \\\"status\\\": \\\"success\\\",\\n  \\\"message\\\": \\\"Application received and processed successfully\\\",\\n  \\\"data\\\": {\\n    \\\"applicationId\\\": \\\"{{ $json.applicationId }}\\\",\\n    \\\"processedAt\\\": \\\"{{ $json.processedAt }}\\\",\\n    \\\"estimatedResponseTime\\\": \\\"24-48 hours\\\",\\n    \\\"nextSteps\\\": \\\"Our team will review your application and contact you with next steps\\\"\\n  },\\n  \\\"meta\\\": {\\n    \\\"processingTimeMs\\\": {{ $json.evaluation?.processingTime || 0 }},\\n    \\\"systemVersion\\\": \\\"v2.0\\\",\\n    \\\"aiPowered\\\": true\\n  }\\n}",
        "options": {
          "responseCode": 200,
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              },
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              }
            ]
          }
        }
      },
      "id": "webhook-response",
      "name": "‚úÖ Send Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1200, 600]
    }
  ],
  "connections": {
    "üì• Application Webhook": {
      "main": [
        [
          {
            "node": "üîÑ Normalize Application Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üîÑ Normalize Application Data": {
      "main": [
        [
          {
            "node": "ü§ñ AI Recruitment Evaluation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ü§ñ AI Recruitment Evaluation": {
      "main": [
        [
          {
            "node": "‚öôÔ∏è Process AI Evaluation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "‚öôÔ∏è Process AI Evaluation": {
      "main": [
        [
          {
            "node": "üöÄ Route: Fast Track",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíº Route: Interview",
            "type": "main",
            "index": 0
          },
          {
            "node": "üß™ Route: Technical Test",
            "type": "main",
            "index": 0
          },
          {
            "node": "‚ùå Route: Reject",
            "type": "main",
            "index": 0
          },
          {
            "node": "üìß Send Application Confirmation",
            "type": "main",
            "index": 0
          },
          {
            "node": "üíæ Store Application Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üöÄ Route: Fast Track": {
      "main": [
        [
          {
            "node": "üö® Slack: Fast Track Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üíº Route: Interview": {
      "main": [
        [
          {
            "node": "üìã Slack: Interview Candidate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üß™ Route: Technical Test": {
      "main": [
        [
          {
            "node": "üß™ Slack: Technical Test Required",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "üìß Send Application Confirmation": {
      "main": [
        [
          {
            "node": "‚úÖ Send Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {},
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-08-06T15:30:00.000Z",
  "versionId": "v2.0.0"
}